# ==============================
# Importa√ß√£o das bibliotecas necess√°rias
# ==============================
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, random_split
from torchvision import datasets, transforms
import os
import sys
import time  
from torch.optim.lr_scheduler import StepLR  # üîπ Agendador de taxa de aprendizado
import numpy as np  # üîπ Necess√°rio para Early Stopping

# Adiciona o caminho do diret√≥rio raiz para importa√ß√£o do modelo
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from model import create_model  # ‚úÖ Importa a arquitetura da CNN personalizada baseada na ResNet-18

# ==============================
# 1. Pr√©-processamento e Aumento de Dados (Data Augmentation)
# ==============================
"""
A normaliza√ß√£o e o aumento de dados (data augmentation) s√£o etapas cruciais no treinamento de redes neurais,
especialmente para melhorar a capacidade de generaliza√ß√£o do modelo e reduzir overfitting.
"""

# üîπ Transforma√ß√µes para o conjunto de treinamento
transform_train = transforms.Compose([
    transforms.Grayscale(num_output_channels=1),  # üîπ Converte imagens para escala de cinza (1 canal)
    transforms.Resize((224, 224)),  # üîπ Redimensiona para 224x224 (entrada padr√£o da ResNet-18)
    transforms.RandomRotation(15),  # üîπ Rota√ß√£o aleat√≥ria para aumentar diversidade
    transforms.RandomHorizontalFlip(),  # üîπ Espelhamento aleat√≥rio
    transforms.ToTensor(),  # üîπ Converte para tensor PyTorch
    transforms.Normalize(mean=[0.5], std=[0.5])  # üîπ Normaliza os valores dos pixels (-1 a 1)
])

# üîπ Transforma√ß√µes para o conjunto de teste (sem data augmentation)
transform_test = transforms.Compose([
    transforms.Grayscale(num_output_channels=1),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5], std=[0.5])
])

# ==============================
# 2. Carregar o Dataset e Criar Conjuntos de Treino/Teste
# ==============================
"""
O dataset √© carregado utilizando a classe `ImageFolder`, que permite organizar os dados em pastas com r√≥tulos.
A divis√£o 80%-20% garante que o modelo tenha uma quantidade adequada de dados para aprender e avaliar seu desempenho.
"""

# üîπ Carregar dataset
dataset = datasets.ImageFolder(root='data', transform=transform_train)
test_dataset = datasets.ImageFolder(root='data', transform=transform_test)

# üîπ Dividir dataset em 80% treino e 20% teste
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, _ = random_split(dataset, [train_size, test_size])

# üîπ Criar DataLoaders para facilitar a leitura em lotes (batchs)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# ==============================
# 3. Criar o Modelo e Definir Hiperpar√¢metros
# ==============================
"""
A arquitetura da rede neural √© baseada na ResNet-18 modificada.
A fun√ß√£o `create_model()` retorna um modelo customizado, j√° adaptado para imagens em escala de cinza.
"""

# üîπ Criar modelo CNN baseado na ResNet-18 modificada
model = create_model()

# üîπ Definir fun√ß√£o de perda e otimizador
criterion = nn.CrossEntropyLoss()  # üîπ Perda utilizada para classifica√ß√£o multi-classe
optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-4)  # üîπ Adam com L2 regularization (weight decay)

# üîπ Agendador de taxa de aprendizado (reduz LR a cada 5 √©pocas)
scheduler = StepLR(optimizer, step_size=5, gamma=0.5)

# üîπ Enviar modelo para GPU se dispon√≠vel
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# ==============================
# 4. Treinamento do Modelo
# ==============================
"""
O modelo √© treinado por 100 √©pocas, utilizando uma abordagem iterativa.
- `loss.backward()`: Computa os gradientes para cada par√¢metro trein√°vel.
- `optimizer.step()`: Atualiza os pesos do modelo com base nos gradientes.
- `scheduler.step()`: Ajusta a taxa de aprendizado para melhorar a converg√™ncia.

O **early stopping** interrompe o treinamento caso a precis√£o n√£o melhore ap√≥s 10 √©pocas consecutivas.
Isso evita que o modelo continue treinando desnecessariamente, poupando tempo e recursos computacionais.
"""

# üîπ Iniciar contagem do tempo
start_time = time.time()
print("\nüöÄ Iniciando treinamento...")

num_epochs = 100
best_accuracy = 0
early_stopping_counter = 0
early_stopping_patience = 10  # üîπ N√∫mero de √©pocas sem melhora para interromper o treinamento

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()  # üîπ Zera os gradientes acumulados
        outputs = model(inputs)  # üîπ Forward pass
        loss = criterion(outputs, labels)  # üîπ Calcula a perda
        loss.backward()  # üîπ Calcula gradientes
        optimizer.step()  # üîπ Atualiza pesos da rede
        running_loss += loss.item()  # üîπ Acumula a perda total

    # üîπ Atualiza o scheduler da taxa de aprendizado
    scheduler.step()

    # ==============================
    # 5. Avalia√ß√£o do Modelo no Conjunto de Teste
    # ==============================
    """
    O modelo √© avaliado no conjunto de teste sem atualiza√ß√£o de gradientes (`torch.no_grad()`).
    - `torch.max(outputs, 1)`: Obt√©m a classe predita com maior probabilidade.
    - `correct / total`: C√°lculo da precis√£o do modelo no conjunto de teste.
    """

    model.eval()
    correct = 0
    total = 0
    test_loss = 0.0
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            test_loss += loss.item()
            _, predicted = torch.max(outputs, 1)  # üîπ Obt√©m a classe predita
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    avg_train_loss = running_loss / len(train_loader)
    avg_test_loss = test_loss / len(test_loader)

    print(f"‚úÖ Epoch {epoch+1}/{num_epochs}, üéØ Precis√£o: {accuracy:.2f}%, üîΩ Loss Treino: {avg_train_loss:.4f}, üîΩ Loss Teste: {avg_test_loss:.4f}")

    # üîπ Implementa√ß√£o do Early Stopping
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        early_stopping_counter = 0  # üîπ Reseta o contador de paci√™ncia
    else:
        early_stopping_counter += 1

    if early_stopping_counter >= early_stopping_patience:
        print("\n‚è≥ Early Stopping ativado: Nenhuma melhora por 10 √©pocas consecutivas. Encerrando treinamento.")
        break

# üîπ Finalizar contagem do tempo
end_time = time.time()
execution_time = end_time - start_time
print(f"\n‚è≥ Tempo total de treinamento: {execution_time:.2f} segundos")

# ==============================
# 6. Salvamento e Gerenciamento do Modelo Treinado
# ==============================
"""
O modelo treinado √© salvo no diret√≥rio `model/` e seu tamanho √© verificado.
Se for maior que 100 MB, ele ser√° exclu√≠do para evitar consumo excessivo de armazenamento.
"""

MODEL_PATH = 'model/model.pth'
torch.save(model.state_dict(), MODEL_PATH)

# üîπ Verificar tamanho do modelo salvo
model_size_mb = os.path.getsize(MODEL_PATH) / (1024 * 1024)  # üîπ Convertendo para MB

if model_size_mb > 100:
    print(f"\n‚ùå O modelo ({model_size_mb:.2f} MB) excede 100 MB e n√£o ser√° salvo.")
    os.remove(MODEL_PATH)  # üîπ Remove o arquivo grande
else:
    print(f"\n‚úÖ Modelo treinado ({model_size_mb:.2f} MB) salvo em {MODEL_PATH}")

